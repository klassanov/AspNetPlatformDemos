

1. Handlers --> Demo1.Handlers project
------------------------------------------------------------
   1.1 Simple Handler Demo
		 - InfoModule commented in web.config
		 - HandlerFactory commented in web.config
		 - DateTimeHandler active in web.config
		 - Start project, urls: ~/,  ~/handlers/datetime
		 
		 - InfoModule active in web.config
		 - Start project, urls: ~/,  ~/handlers/datetime
   
   1.2 Handler Factory Demo
		- InfoModule active in web.config
		- DateTimeHandler active in web.config
		- GrnHandlerFactory active in web.config
		- Start project, url:  ~/handlers/grn with Chrome and Mozilla and observe different handlers used for the same url








2. Application and Request Lifecycles, Events subscription --> Demo2.AppAndRequestLifecycles project
------------------------------------------------------------
   2.1 Application Lifecycle: Application_Start() and Application_End() Demo -> DONE
        - Start project url: ~/
		- Hit breakpoints in the Global.asax.cs
   

   2.2 Request Lifecycle: PostAuthenticateRequest(), AuthorizeRequest(), PostAuthenticateRequest(), AuthorizeRequest() Demo -> DONE
       - Start project url: ~/Home/Events
       - Hit breakpoints in the Global.asax.cs and explain how the subscription to events is done







3. Modules --> Demo3.Modules, use 1 project for all the demos and enable/disable modules, use different urls when needed
or can separate in projects if needed like Demo3.1.BlaBla
-----------------------------------------------------------
   3.1 Info Module Demo -> DONE
        - InfoModule active in web.config
		- Start project url: ~/ in Chrome and in Firefox


   3.2 Built In Modules Demo -> DONE
        - InfoModule active in web.config
		- Start project url: ~/Home/Builtinmodules

   
   3.3 Show all request lifecycle events in a normal situation and when an error is thrown, the lifecycle changes -> DONE (move as 3.1 and after showing the diagram)
		- EventsListModule active in web.config
		- Start project url: ~/Home/EventsList. Observe Output VS window and EventsList view
		
		- Start project url: ~/Home/EventsListError. Observe Output VS window and EventsListError view
		- Observe that the following events
						PostExecuteRequestHandler
						ReleaseRequestState
						PostReleaseRequestState
						UpdateRequestCache
						PostUpdateRequestCache

		are never raised, so modules that rely on them and have subsribed for them will never recieve the events 
		=> these modules maybe can be left in an undesirable state (for ex. cannot release resources)
		=> we should always handle the Error event in a module in case that the request has encountered problems
   

   3.4 Optimize a redirection using a module -> DONE
		- EventsListModule and RedirectModule active in web.config
		- Start project url in Chrome anonymous mode: ~/Home/OldAction, observe redirection process to ~/Home/NewAction
		- Show in the VS debug window the events executed in the redirected request and in the normal request

   3.4 Terminating Requests
        - stats module
		- special url module
	    -...
		-...
		-...

   3.6 Events raised and consumed by modules demo

   3.5 Modules providing service to Handlers
		- DateTimeHandler active in web.config
		- DateTimeModule commented in web.config
		- Start project, url: ~/datetime

		- DateTimeHandler active in web.config
		- DateTimeModule active in web.config
		- Start project, url: ~/datetime


   3.6 Common Modules in a separate dll for reusing purposes
      - create reference to ModulesClassLibrary the project and start, url: ~/



4. Disrupting the Request Lifecycle -> NO
-----------------------------------------------------------

   4.2 ?? Manage Handler Selection (Preempting Handler Selection) using a module ??
   4.3 ?? Redirect from a handler: Transferring a request to a different handler from the selected handler ??




5.Tracing requests --> Demo4.TracingRequests project
------------------------------------------------------------

        
