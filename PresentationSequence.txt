
1. Handlers --> Demo1.Handlers project
------------------------------------------------------------
   1.1 Simple Handler Demo -> DONE
		 - DateTimeHandler active in web.config
		 - Start project, urls: ~/,
		 - Navigate to  ~/handlers/datetime
		 
		 - DateTimeHandler, InfoModule active in web.config
		 - Start project, urls: ~/,
		 - Navigate to  ~/handlers/datetime


   
   1.2 Handler Factory Demo -> DONE
		- DateTimeHandler, InfoModule, GrnHandlerFactory active in web.config
		- Start project, urls: ~/
		- Navigate to: ~/handlers/grn with both Chrome and Mozilla and observe different handlers 
		  instantiated and used for the same url



2. Application and Request Lifecycles, Events subscription --> Demo2.AppAndRequestLifecycles project
------------------------------------------------------------
   2.1 Application Lifecycle: Application_Start() and Application_End() Demo -> DONE
        - Start project url: ~/
		- Hit breakpoints in the Global.asax.cs
   

   2.2 Request Lifecycle: PostAuthenticateRequest(), AuthorizeRequest(), PostAuthenticateRequest(), AuthorizeRequest() Demo -> DONE
       - Start project url: ~/Home/Events
       - Hit breakpoints in the Global.asax.cs and explain how the subscription to events is done







3. Modules --> Demo3.Modules, use 1 project for all the demos and enable/disable modules, use different urls when needed
or can separate in projects if needed like Demo3.1.BlaBla
-----------------------------------------------------------
   3.1 Info Module Demo -> DONE
        - InfoModule active in web.config
		- Start project url: ~/ in Chrome and in Firefox



   3.2 Built In Modules Demo -> DONE
        - InfoModule active in web.config
		- Start project url: ~/Home/Builtinmodules


   
   3.3 Show all request lifecycle events in a normal situation and when an error is thrown, the lifecycle changes -> DONE (move as 3.1 and after showing the diagram)
		- EventsListModule active in web.config
		- Start project url: ~/Home/EventsList. Observe Output VS window and EventsList view
		
		- Start project url: ~/Home/EventsListError. Observe Output VS window and EventsListError view
		- Observe that the following events
						PostExecuteRequestHandler
						ReleaseRequestState
						PostReleaseRequestState
						UpdateRequestCache
						PostUpdateRequestCache

		are never raised, so modules that rely on them and have subsribed for them will never recieve the events 
		=> these modules maybe can be left in an undesirable state (for ex. cannot release resources)
		=> we should always handle the Error event in a module in case that the request has encountered problems

   

   3.4 Optimize a redirection using a module -> DONE
		- EventsListModule and RedirectModule active in web.config
		- Start project url in Chrome anonymous mode: ~/Home/OldAction, observe redirection process to ~/Home/NewAction
		- Show in the VS debug window the events executed in the redirected request and in the normal request


   
   3.5 Terminating Requests by calling CompleteRequest() -> DONE
		- DeflectModule and EventsListModule active in web.config
		- logToResponse = false in web.config
		- Start project url: ~/ , observe events in VS debug window


        - StatsModule and EventsListModule active in web.config
	    - Start project url: ~/
		- Navigate to some urls: ~/home/oldaction, ~/home/newaction, ~/home/builtinmodules
		- Navigate to the special url: ~/stats and observe events in VS debug window as well as the web page



   3.6 Events raised and consumed by modules demo -> TODO



   3.7 Modules providing service to Handlers -> DONE
		- DateTimeHandler active in web.config
		- Start project, url: ~/datetime, observe that we do not have the needed information

		- DateTimeHandler and DateTimeModule active in web.config
		- Start project, url: ~/datetime


   3.8 Common Modules in a separate dll for reusing purposes (self-registration) -> DONE
      - Active modules in web.config: none
	  - Show the CommonModulesClassLibrary, remove the refence to it and then add it 
	  - Explain the self registering mechanism, put debug points
	  - Start project url: ~/





4.Tracing requests --> Demo4.TracingRequests project -> TODO
------------------------------------------------------------

        
